services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    user: '0'
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver
      - --enable-feature=native-histograms
    volumes:
      - ./volume/prometheus/data:/prometheus
      - ./volume/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
    networks:
      - observability
    ports:
      - 9090:9090
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    user: '0'
    volumes:
      - ./volume/grafana/data:/var/lib/grafana
      - ./volume/grafana/config/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    restart: always
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      #- GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
      #- GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-exploretraces-app/grafana-exploretraces-app-latest.zip;grafana-traces-app
    networks:
      - observability
    ports:
      - 3000:3000
    depends_on:
      - prometheus
      - loki
      - tempo

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init_tempo:
    image: &tempoImage grafana/tempo:latest
    container_name: tempo-init
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./volume/tempo/data:/var/tempo
    networks:
      - observability

  tempo:
    image: *tempoImage
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./volume/tempo/config/tempo.yaml:/etc/tempo.yaml
      - ./volume/tempo/data:/var/tempo
    ports:
      - "3200" # tempo
      - "4317" # otlp grpc
    networks:
      - observability
    depends_on:
      - init_tempo
      - prometheus

  # And put them in an OTEL collector pipeline...
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:latest
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./volume/otel-collector/config/otel-collector.yaml:/etc/otel-collector.yaml
    ports:
      - "4818:4318" # otlp http
      - "4817:4317" # otlp grpc
    networks:
      - observability
    depends_on:
      - tempo

  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./volume/loki/config/local-config.yaml:/etc/loki/local-config.yaml
    networks:
      - observability

networks:
  observability:
    external: true
  